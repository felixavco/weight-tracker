{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["SECRET","process","env","UsersController","register","req","res","name","user_name","password","body","user","User","findOne","status","json","error","salt","bcrypt","genSalt","hashed_password","hash","newUser","save","msg","ERROR","toString","login","errorResponse","isMatch","compare","id","payload","token","jwt","sign","expiresIn","success","type","create","getList","users","find","response","map","_id","lastest_weight","weight_history","getOne","user_id","params","findById","update","findByIdAndUpdate","new","delete","findByIdAndDelete","insertWeight","weight","newEntry","removeWeight","reg_id","updatedHistory","filter","item"],"mappings":"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","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport User from '../models/User';\r\nconst { SECRET } = process.env;\r\n\r\nclass UsersController {\r\n\r\n    /**\r\n     * @Route '/api/user/register'\r\n     * @Method POST\r\n     * @Access Public\r\n     */\r\n    register() {\r\n        return async (req, res) => {\r\n            try {\r\n                const { name, user_name, password } = req.body;\r\n\r\n                //checks if the email address already exist\r\n                const user = await User.findOne({ user_name });\r\n\r\n                if (user) {\r\n                    return res.status(409).json({ error: \"El nombre de usuario ya existe\" });\r\n                }\r\n\r\n                //* Encrypt plain password\r\n                const salt = await bcrypt.genSalt(12);\r\n                const hashed_password = await bcrypt.hash(password, salt);\r\n\r\n                //* Create new user\r\n                const newUser = new User({\r\n                    name,\r\n                    user_name,\r\n                    password: hashed_password\r\n                });\r\n\r\n                await newUser.save();\r\n\r\n                res.status(201).json({ msg: 'OK' });\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @Route '/api/user/login'\r\n     * @Method POST\r\n     * @Access Public\r\n     */\r\n    login() {\r\n        return async (req, res) => {\r\n            try {\r\n                const { user_name, password } = req.body;\r\n                const errorResponse = { error: 'El usuario o la contrase√±a son incorrectos' };\r\n\r\n                //* Find user by user_name\r\n                const user = await User.findOne({ user_name });\r\n\r\n                if (!user) {\r\n                    return res.status(404).json(errorResponse);\r\n                }\r\n\r\n                //* Compare passwords\r\n                const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n                if (!isMatch) {\r\n                    return res.status(401).json(errorResponse);\r\n                } else {\r\n                    const { id, name, user_name } = user;\r\n                    const payload = { id, name, user_name };\r\n\r\n                    //* Generate Token\r\n                    const token = await jwt.sign(payload, SECRET, { expiresIn: '30d' }); //* Expires in 30 days\r\n                    res.status(200).json({\r\n                        success: true,\r\n                        type: 'Bearer',\r\n                        token: token\r\n                    });\r\n\r\n                }\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user'\r\n    * @Method POST\r\n    * @Access Protected\r\n    */\r\n    create() {\r\n        return async (req, res) => {\r\n            try {\r\n                //* Create new user\r\n                const newUser = new User({ name: req.body.name });\r\n\r\n                await newUser.save();\r\n\r\n                res.status(201).json({ msg: 'OK' });\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user'\r\n    * @Method GET\r\n    * @Access Protected\r\n    */\r\n    getList() {\r\n        return async (req, res) => {\r\n            try {\r\n\r\n                const users = await User.find();\r\n\r\n                const response = users.map(user => {\r\n                    return { id: user._id, name: user.name, lastest_weight: user.weight_history[0] || null }\r\n                })\r\n\r\n                res.json(response);\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user/:user_id'\r\n    * @Method GET\r\n    * @Access Protected\r\n    */\r\n    getOne() {\r\n        return async (req, res) => {\r\n            try {\r\n                const { user_id } = req.params;\r\n\r\n                const user = await User.findById(user_id);\r\n\r\n                if (!user) {\r\n                    return res.status(404).json({ error: 'No ha encontrado ningun usuario' });\r\n                }\r\n\r\n                const response = {\r\n                    id: user._id,\r\n                    name: user.name, \r\n                    weight_history: user.weight_history\r\n                }\r\n\r\n                res.json(response);\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user/:user_id'\r\n    * @Method PUT\r\n    * @Access Protected\r\n    */\r\n    update() {\r\n        return async (req, res) => {\r\n            try {\r\n                const { user_id } = req.params;\r\n                const { name } = req.body;\r\n\r\n                const user = await User.findByIdAndUpdate(user_id, { name }, { new: true });\r\n\r\n                if (!user) {\r\n                    return res.status(404).json({ error: 'No ha encontrado ningun usuario' });\r\n                }\r\n\r\n                res.json(user);\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user/:user_id'\r\n    * @Method DELETE\r\n    * @Access Protected\r\n    */\r\n    delete() {\r\n        return async (req, res) => {\r\n            try {\r\n                const { user_id } = req.params;\r\n\r\n                await User.findByIdAndDelete(user_id);\r\n\r\n                res.json({ msg: 'OK' });\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user/:user_id/insert'\r\n    * @Method PUT \r\n    * @Access Protected\r\n    */\r\n    insertWeight() {\r\n        return async (req, res) => {\r\n            try {\r\n\r\n                const { user_id } = req.params;\r\n                const { weight } = req.body;\r\n\r\n                //* Find User \r\n                let user = await User.findById(user_id);\r\n                if (!user) {\r\n                    return res.status(404).json({ error: 'No ha encontrado ningun usuario' });\r\n                }\r\n\r\n                const { weight_history } = user;\r\n\r\n                //* add new weight entry and spread current weight history\r\n                const newEntry = [{ weight }, ...weight_history];\r\n\r\n                //* Update user with new weight history\r\n                user = await User.findByIdAndUpdate(user_id, { weight_history: newEntry }, { new: true });\r\n\r\n                res.json(user);\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @Route '/api/user/:user_id/remove'\r\n    * @Method PUT \r\n    * @Access Protected\r\n    */\r\n    removeWeight() {\r\n        return async (req, res) => {\r\n            try {\r\n\r\n                const { user_id } = req.params;\r\n                const { reg_id } = req.body;\r\n\r\n                //* Find User \r\n                let user = await User.findById(user_id);\r\n                if (!user) {\r\n                    return res.status(404).json({ error: 'No ha encontrado ningun usuario' });\r\n                }\r\n\r\n                const { weight_history } = user;\r\n\r\n                //* add new weight entry and spread current weight history\r\n                const updatedHistory = weight_history.filter(item => item._id.toString() !== reg_id);\r\n     \r\n                //* Update user with updated weight history\r\n                user = await User.findByIdAndUpdate(user_id, { weight_history: updatedHistory }, { new: true });\r\n\r\n                res.json(user);\r\n\r\n            } catch (error) {\r\n                res.status(500).json({ ERROR: error.toString() });\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default UsersController;\r\n"],"file":"UsersController.js"}